<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lyz.ddedss_springboot.mapper.TeacherSubjectMapper">
    <select id="getClassAndSubjectByTeacherId" resultType="com.lyz.ddedss_springboot.vo.ClassAndSubject">
        SELECT c.id          'classId',
               c.`name`      'className',
               COUNT(stu.id) 'peopleNum',
               s.id          'subjectId',
               s.`name`      'subjectName'
        FROM ddedss.teacher_subject ts
                     INNER JOIN ddedss.lesson l ON l.teacher_subject_id = ts.id
                     INNER JOIN ddedss.class c ON l.class_id = c.id
                     INNER JOIN ddedss.`subject` s ON s.id = ts.subject_id
                     LEFT JOIN ddedss.`student` stu ON stu.class_id = c.id
        WHERE ts.teacher_id = #{teacherId}
        GROUP BY stu.class_id
    </select>

    <select id="getTeachersBySubjectId" resultType="com.lyz.ddedss_springboot.entity.TeacherSubject">
        SELECT ts.teacher_id, ts.subject_id
        FROM ddedss.lesson l
                     INNER JOIN ddedss.teacher_subject ts ON l.teacher_subject_id = ts.id
        GROUP BY l.teacher_subject_id
        HAVING ts.subject_id = #{subjectId}
        ORDER BY COUNT(l.id),
                 ts.`level` DESC
    </select>

    <select id="getCountLikeTeacherName" resultType="java.lang.Long">
        select count(*)
        from ddedss.teacher_subject
        where teacher_id in (select id from ddedss.teacher where name like "%"#{likeInputValue}"%")
    </select>

    <select id="getListLikeTeacherName" resultType="com.lyz.ddedss_springboot.entity.TeacherSubject">
        select *
        from ddedss.teacher_subject
        where teacher_id in (select id from ddedss.teacher where name like "%"#{likeInputValue}"%")
        limit #{pageNo},#{pageSize}
    </select>
</mapper>
